// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package trainers_contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// TrainersMetaData contains all meta data concerning the Trainers contract.
var TrainersMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"MintTrainer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEP\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"URI_\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_m\",\"type\":\"uint16\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_u\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"tokenModel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTraker_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526001600c5534801562000015575f80fd5b50604051620045fe380380620045fe83398181016040528101906200003b919062000368565b818181600190816200004e919062000622565b50806002908162000060919062000622565b505050620000865f801b6200007a6200008e60201b60201c565b6200009560201b60201c565b505062000706565b5f33905090565b620000a782826200018060201b60201c565b6200017c5760015f808481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550620001216200008e60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6200024482620001fc565b810181811067ffffffffffffffff821117156200026657620002656200020c565b5b80604052505050565b5f6200027a620001e3565b905062000288828262000239565b919050565b5f67ffffffffffffffff821115620002aa57620002a96200020c565b5b620002b582620001fc565b9050602081019050919050565b5f5b83811015620002e1578082015181840152602081019050620002c4565b5f8484015250505050565b5f62000302620002fc846200028d565b6200026f565b905082815260208101848484011115620003215762000320620001f8565b5b6200032e848285620002c2565b509392505050565b5f82601f8301126200034d576200034c620001f4565b5b81516200035f848260208601620002ec565b91505092915050565b5f8060408385031215620003815762000380620001ec565b5b5f83015167ffffffffffffffff811115620003a157620003a0620001f0565b5b620003af8582860162000336565b925050602083015167ffffffffffffffff811115620003d357620003d2620001f0565b5b620003e18582860162000336565b9150509250929050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200043a57607f821691505b60208210810362000450576200044f620003f5565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620004b47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000477565b620004c0868362000477565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6200050a62000504620004fe84620004d8565b620004e1565b620004d8565b9050919050565b5f819050919050565b6200052583620004ea565b6200053d620005348262000511565b84845462000483565b825550505050565b5f90565b6200055362000545565b620005608184846200051a565b505050565b5b8181101562000587576200057b5f8262000549565b60018101905062000566565b5050565b601f821115620005d657620005a08162000456565b620005ab8462000468565b81016020851015620005bb578190505b620005d3620005ca8562000468565b83018262000565565b50505b505050565b5f82821c905092915050565b5f620005f85f1984600802620005db565b1980831691505092915050565b5f620006128383620005e7565b9150826002028217905092915050565b6200062d82620003eb565b67ffffffffffffffff8111156200064957620006486200020c565b5b62000655825462000422565b620006628282856200058b565b5f60209050601f83116001811462000698575f841562000683578287015190505b6200068f858262000605565b865550620006fe565b601f198416620006a88662000456565b5f5b82811015620006d157848901518255600182019150602085019450602081019050620006aa565b86831015620006f15784890151620006ed601f891682620005e7565b8355505b6001600288020188555050505b505050505050565b613eea80620007145f395ff3fe608060405234801561000f575f80fd5b50600436106101cd575f3560e01c806342842e0e11610102578063a217fddf116100a0578063c87b56dd1161006f578063c87b56dd1461054f578063d547741f1461057f578063e985e9c51461059b578063fe85996a146105cb576101cd565b8063a217fddf146104dd578063a22cb465146104fb578063ad0be4bd14610517578063b88d4fde14610533576101cd565b80636352211e116100dc5780636352211e1461042f57806370a082311461045f57806391d148541461048f57806395d89b41146104bf576101cd565b806342842e0e146103c55780634f6ccce7146103e15780636313bd3014610411576101cd565b80631b21c00a1161016f5780632a0acc6a116101495780632a0acc6a1461033f5780632f2ff15d1461035d5780632f745c591461037957806336568abe146103a9576101cd565b80631b21c00a146102c357806323b872dd146102f3578063248a9ca31461030f576101cd565b8063081812fc116101ab578063081812fc1461023b578063095ea7b31461026b5780630e1a6a9c1461028757806318160ddd146102a5576101cd565b806301ffc9a7146101d157806302fe53051461020157806306fdde031461021d575b5f80fd5b6101eb60048036038101906101e69190612898565b6105e9565b6040516101f891906128dd565b60405180910390f35b61021b60048036038101906102169190612957565b6105fa565b005b61022561061d565b6040516102329190612a2c565b60405180910390f35b61025560048036038101906102509190612a7f565b6106ad565b6040516102629190612ae9565b60405180910390f35b61028560048036038101906102809190612b2c565b6106ef565b005b61028f610805565b60405161029c9190612b79565b60405180910390f35b6102ad61080b565b6040516102ba9190612b79565b60405180910390f35b6102dd60048036038101906102d89190612a7f565b610817565b6040516102ea9190612b79565b60405180910390f35b61030d60048036038101906103089190612b92565b610842565b005b61032960048036038101906103249190612c15565b6108a2565b6040516103369190612c4f565b60405180910390f35b6103476108be565b6040516103549190612c4f565b60405180910390f35b61037760048036038101906103729190612c68565b6108e2565b005b610393600480360381019061038e9190612b2c565b610903565b6040516103a09190612b79565b60405180910390f35b6103c360048036038101906103be9190612c68565b6109a3565b005b6103df60048036038101906103da9190612b92565b610a26565b005b6103fb60048036038101906103f69190612a7f565b610a45565b6040516104089190612b79565b60405180910390f35b610419610ab3565b6040516104269190612c4f565b60405180910390f35b61044960048036038101906104449190612a7f565b610ad7565b6040516104569190612ae9565b60405180910390f35b61047960048036038101906104749190612ca6565b610b5b565b6040516104869190612b79565b60405180910390f35b6104a960048036038101906104a49190612c68565b610c0f565b6040516104b691906128dd565b60405180910390f35b6104c7610c72565b6040516104d49190612a2c565b60405180910390f35b6104e5610d02565b6040516104f29190612c4f565b60405180910390f35b61051560048036038101906105109190612cfb565b610d08565b005b610531600480360381019061052c9190612d70565b610d1e565b005b61054d60048036038101906105489190612ed6565b610ddd565b005b61056960048036038101906105649190612a7f565b610e3f565b6040516105769190612a2c565b60405180910390f35b61059960048036038101906105949190612c68565b610eae565b005b6105b560048036038101906105b09190612f56565b610ecf565b6040516105c291906128dd565b60405180910390f35b6105d3610f5d565b6040516105e09190612a2c565b60405180910390f35b5f6105f382610fe9565b9050919050565b5f801b61060681611062565b8282600b9182610617929190613198565b50505050565b60606001805461062c90612fcb565b80601f016020809104026020016040519081016040528092919081815260200182805461065890612fcb565b80156106a35780601f1061067a576101008083540402835291602001916106a3565b820191905f5260205f20905b81548152906001019060200180831161068657829003601f168201915b5050505050905090565b5f6106b782611076565b60055f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f6106f982610ad7565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610769576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610760906132d5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107886110c1565b73ffffffffffffffffffffffffffffffffffffffff1614806107b757506107b6816107b16110c1565b610ecf565b5b6107f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ed90613363565b60405180910390fd5b61080083836110c8565b505050565b600c5481565b5f600980549050905090565b5f600d5f8381526020019081526020015f205f9054906101000a900461ffff1661ffff169050919050565b61085361084d6110c1565b8261117e565b610892576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610889906133f1565b60405180910390fd5b61089d838383611212565b505050565b5f805f8381526020019081526020015f20600101549050919050565b7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b6108eb826108a2565b6108f481611062565b6108fe83836114fe565b505050565b5f61090d83610b5b565b821061094e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109459061347f565b60405180910390fd5b60075f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f2054905092915050565b6109ab6110c1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0f9061350d565b60405180910390fd5b610a2282826115d8565b5050565b610a4083838360405180602001604052805f815250610ddd565b505050565b5f610a4e61080b565b8210610a8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a869061359b565b60405180910390fd5b60098281548110610aa357610aa26135b9565b5b905f5260205f2001549050919050565b7fb4ce9f8311d4fdc9a4f41ed950639c1d793f5d19cd88a87b9ecec171f485afe281565b5f80610ae2836116b2565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4990613630565b60405180910390fd5b80915050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc1906136be565b60405180910390fd5b60045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b606060028054610c8190612fcb565b80601f0160208091040260200160405190810160405280929190818152602001828054610cad90612fcb565b8015610cf85780601f10610ccf57610100808354040283529160200191610cf8565b820191905f5260205f20905b815481529060010190602001808311610cdb57829003601f168201915b5050505050905090565b5f801b81565b610d1a610d136110c1565b83836116eb565b5050565b7fb4ce9f8311d4fdc9a4f41ed950639c1d793f5d19cd88a87b9ecec171f485afe2610d4881611062565b5f600c54905082600d5f8381526020019081526020015f205f6101000a81548161ffff021916908361ffff1602179055506001600c5f828254610d8b9190613709565b92505081905550610d9c8482611852565b7ffcbd9479bb682193b3eb060a58134eda82cf0a141904328119cfb9c15e6e171e838286604051610dcf9392919061374b565b60405180910390a150505050565b610dee610de86110c1565b8361117e565b610e2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e24906133f1565b60405180910390fd5b610e3984848484611a65565b50505050565b6060610e4a82611076565b610e52611ac1565b610e5b83611b51565b610e86600d5f8681526020019081526020015f205f9054906101000a900461ffff1661ffff16611b51565b604051602001610e9893929190613804565b6040516020818303038152906040529050919050565b610eb7826108a2565b610ec081611062565b610eca83836115d8565b505050565b5f60065f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b600b8054610f6a90612fcb565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9690612fcb565b8015610fe15780601f10610fb857610100808354040283529160200191610fe1565b820191905f5260205f20905b815481529060010190602001808311610fc457829003601f168201915b505050505081565b5f7f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061105b575061105a82611c1b565b5b9050919050565b6110738161106e6110c1565b611cfc565b50565b61107f81611d80565b6110be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b590613630565b60405180910390fd5b50565b5f33905090565b8160055f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661113883610ad7565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b5f8061118983610ad7565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806111cb57506111ca8185610ecf565b5b8061120957508373ffffffffffffffffffffffffffffffffffffffff166111f1846106ad565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661123282610ad7565b73ffffffffffffffffffffffffffffffffffffffff1614611288576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127f906138af565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ed9061393d565b60405180910390fd5b6113038383836001611dc0565b8273ffffffffffffffffffffffffffffffffffffffff1661132382610ad7565b73ffffffffffffffffffffffffffffffffffffffff1614611379576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611370906138af565b60405180910390fd5b60055f8281526020019081526020015f205f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600160045f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282540392505081905550600160045f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508160035f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46114f98383836001611f1b565b505050565b6115088282610c0f565b6115d45760015f808481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506115796110c1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6115e28282610c0f565b156116ae575f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506116536110c1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b5f60035f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611759576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611750906139a5565b60405180910390fd5b8060065f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161184591906128dd565b60405180910390a3505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036118c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b790613a0d565b60405180910390fd5b6118c981611d80565b15611909576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190090613a75565b60405180910390fd5b6119165f83836001611dc0565b61191f81611d80565b1561195f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195690613a75565b60405180910390fd5b600160045f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508160035f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611a615f83836001611f1b565b5050565b611a70848484611212565b611a7c84848484611f21565b611abb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab290613b03565b60405180910390fd5b50505050565b6060600b8054611ad090612fcb565b80601f0160208091040260200160405190810160405280929190818152602001828054611afc90612fcb565b8015611b475780601f10611b1e57610100808354040283529160200191611b47565b820191905f5260205f20905b815481529060010190602001808311611b2a57829003601f168201915b5050505050905090565b60605f6001611b5f846120a3565b0190505f8167ffffffffffffffff811115611b7d57611b7c612db2565b5b6040519080825280601f01601f191660200182016040528015611baf5781602001600182028036833780820191505090505b5090505f82602001820190505b600115611c10578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611c0557611c04613b21565b5b0494505f8503611bbc575b819350505050919050565b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611ce557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611cf55750611cf4826121f4565b5b9050919050565b611d068282610c0f565b611d7c57611d138161226d565b611d20835f1c602061229a565b604051602001611d31929190613be2565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d739190612a2c565b60405180910390fd5b5050565b5f8073ffffffffffffffffffffffffffffffffffffffff16611da1836116b2565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b611dcc848484846124cf565b6001811115611e10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0790613c8b565b60405180910390fd5b5f8290505f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603611e5557611e50816124d5565b611e94565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611e9357611e928582612519565b5b5b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611ed557611ed08161266f565b611f14565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611f1357611f12848261272f565b5b5b5050505050565b50505050565b5f611f418473ffffffffffffffffffffffffffffffffffffffff166127a7565b15612096578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611f6a6110c1565b8786866040518563ffffffff1660e01b8152600401611f8c9493929190613cfb565b6020604051808303815f875af1925050508015611fc757506040513d601f19601f82011682018060405250810190611fc49190613d59565b60015b612046573d805f8114611ff5576040519150601f19603f3d011682016040523d82523d5f602084013e611ffa565b606091505b505f81510361203e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203590613b03565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061209b565b600190505b949350505050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106120ff577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816120f5576120f4613b21565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061213c576d04ee2d6d415b85acef8100000000838161213257612131613b21565b5b0492506020810190505b662386f26fc10000831061216b57662386f26fc10000838161216157612160613b21565b5b0492506010810190505b6305f5e1008310612194576305f5e100838161218a57612189613b21565b5b0492506008810190505b61271083106121b95761271083816121af576121ae613b21565b5b0492506004810190505b606483106121dc57606483816121d2576121d1613b21565b5b0492506002810190505b600a83106121eb576001810190505b80915050919050565b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806122665750612265826127c9565b5b9050919050565b60606122938273ffffffffffffffffffffffffffffffffffffffff16601460ff1661229a565b9050919050565b60605f60028360026122ac9190613d84565b6122b69190613709565b67ffffffffffffffff8111156122cf576122ce612db2565b5b6040519080825280601f01601f1916602001820160405280156123015781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000815f81518110612338576123376135b9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061239b5761239a6135b9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053505f60018460026123d99190613d84565b6123e39190613709565b90505b6001811115612482577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612425576124246135b9565b5b1a60f81b82828151811061243c5761243b6135b9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600485901c94508061247b90613dc5565b90506123e6565b505f84146124c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124bc90613e36565b60405180910390fd5b8091505092915050565b50505050565b600980549050600a5f8381526020019081526020015f2081905550600981908060018154018082558091505060019003905f5260205f20015f909190919091505550565b5f600161252584610b5b565b61252f9190613e54565b90505f60085f8481526020019081526020015f20549050818114612606575f60075f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f205490508060075f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f20819055508160085f8381526020019081526020015f2081905550505b60085f8481526020019081526020015f205f905560075f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f205f905550505050565b5f60016009805490506126829190613e54565b90505f600a5f8481526020019081526020015f205490505f600983815481106126ae576126ad6135b9565b5b905f5260205f200154905080600983815481106126ce576126cd6135b9565b5b905f5260205f20018190555081600a5f8381526020019081526020015f2081905550600a5f8581526020019081526020015f205f9055600980548061271657612715613e87565b5b600190038181905f5260205f20015f9055905550505050565b5f61273983610b5b565b90508160075f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f20819055508060085f8481526020019081526020015f2081905550505050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61287781612843565b8114612881575f80fd5b50565b5f813590506128928161286e565b92915050565b5f602082840312156128ad576128ac61283b565b5b5f6128ba84828501612884565b91505092915050565b5f8115159050919050565b6128d7816128c3565b82525050565b5f6020820190506128f05f8301846128ce565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f840112612917576129166128f6565b5b8235905067ffffffffffffffff811115612934576129336128fa565b5b6020830191508360018202830111156129505761294f6128fe565b5b9250929050565b5f806020838503121561296d5761296c61283b565b5b5f83013567ffffffffffffffff81111561298a5761298961283f565b5b61299685828601612902565b92509250509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156129d95780820151818401526020810190506129be565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6129fe826129a2565b612a0881856129ac565b9350612a188185602086016129bc565b612a21816129e4565b840191505092915050565b5f6020820190508181035f830152612a4481846129f4565b905092915050565b5f819050919050565b612a5e81612a4c565b8114612a68575f80fd5b50565b5f81359050612a7981612a55565b92915050565b5f60208284031215612a9457612a9361283b565b5b5f612aa184828501612a6b565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612ad382612aaa565b9050919050565b612ae381612ac9565b82525050565b5f602082019050612afc5f830184612ada565b92915050565b612b0b81612ac9565b8114612b15575f80fd5b50565b5f81359050612b2681612b02565b92915050565b5f8060408385031215612b4257612b4161283b565b5b5f612b4f85828601612b18565b9250506020612b6085828601612a6b565b9150509250929050565b612b7381612a4c565b82525050565b5f602082019050612b8c5f830184612b6a565b92915050565b5f805f60608486031215612ba957612ba861283b565b5b5f612bb686828701612b18565b9350506020612bc786828701612b18565b9250506040612bd886828701612a6b565b9150509250925092565b5f819050919050565b612bf481612be2565b8114612bfe575f80fd5b50565b5f81359050612c0f81612beb565b92915050565b5f60208284031215612c2a57612c2961283b565b5b5f612c3784828501612c01565b91505092915050565b612c4981612be2565b82525050565b5f602082019050612c625f830184612c40565b92915050565b5f8060408385031215612c7e57612c7d61283b565b5b5f612c8b85828601612c01565b9250506020612c9c85828601612b18565b9150509250929050565b5f60208284031215612cbb57612cba61283b565b5b5f612cc884828501612b18565b91505092915050565b612cda816128c3565b8114612ce4575f80fd5b50565b5f81359050612cf581612cd1565b92915050565b5f8060408385031215612d1157612d1061283b565b5b5f612d1e85828601612b18565b9250506020612d2f85828601612ce7565b9150509250929050565b5f61ffff82169050919050565b612d4f81612d39565b8114612d59575f80fd5b50565b5f81359050612d6a81612d46565b92915050565b5f8060408385031215612d8657612d8561283b565b5b5f612d9385828601612b18565b9250506020612da485828601612d5c565b9150509250929050565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612de8826129e4565b810181811067ffffffffffffffff82111715612e0757612e06612db2565b5b80604052505050565b5f612e19612832565b9050612e258282612ddf565b919050565b5f67ffffffffffffffff821115612e4457612e43612db2565b5b612e4d826129e4565b9050602081019050919050565b828183375f83830152505050565b5f612e7a612e7584612e2a565b612e10565b905082815260208101848484011115612e9657612e95612dae565b5b612ea1848285612e5a565b509392505050565b5f82601f830112612ebd57612ebc6128f6565b5b8135612ecd848260208601612e68565b91505092915050565b5f805f8060808587031215612eee57612eed61283b565b5b5f612efb87828801612b18565b9450506020612f0c87828801612b18565b9350506040612f1d87828801612a6b565b925050606085013567ffffffffffffffff811115612f3e57612f3d61283f565b5b612f4a87828801612ea9565b91505092959194509250565b5f8060408385031215612f6c57612f6b61283b565b5b5f612f7985828601612b18565b9250506020612f8a85828601612b18565b9150509250929050565b5f82905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612fe257607f821691505b602082108103612ff557612ff4612f9e565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026130577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261301c565b613061868361301c565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61309c61309761309284612a4c565b613079565b612a4c565b9050919050565b5f819050919050565b6130b583613082565b6130c96130c1826130a3565b848454613028565b825550505050565b5f90565b6130dd6130d1565b6130e88184846130ac565b505050565b5b8181101561310b576131005f826130d5565b6001810190506130ee565b5050565b601f8211156131505761312181612ffb565b61312a8461300d565b81016020851015613139578190505b61314d6131458561300d565b8301826130ed565b50505b505050565b5f82821c905092915050565b5f6131705f1984600802613155565b1980831691505092915050565b5f6131888383613161565b9150826002028217905092915050565b6131a28383612f94565b67ffffffffffffffff8111156131bb576131ba612db2565b5b6131c58254612fcb565b6131d082828561310f565b5f601f8311600181146131fd575f84156131eb578287013590505b6131f5858261317d565b86555061325c565b601f19841661320b86612ffb565b5f5b828110156132325784890135825560018201915060208501945060208101905061320d565b8683101561324f578489013561324b601f891682613161565b8355505b6001600288020188555050505b50505050505050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e655f8201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b5f6132bf6021836129ac565b91506132ca82613265565b604082019050919050565b5f6020820190508181035f8301526132ec816132b3565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f5f8201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b5f61334d603d836129ac565b9150613358826132f3565b604082019050919050565b5f6020820190508181035f83015261337a81613341565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e655f8201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b5f6133db602d836129ac565b91506133e682613381565b604082019050919050565b5f6020820190508181035f830152613408816133cf565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f755f8201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b5f613469602b836129ac565b91506134748261340f565b604082019050919050565b5f6020820190508181035f8301526134968161345d565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e63655f8201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b5f6134f7602f836129ac565b91506135028261349d565b604082019050919050565b5f6020820190508181035f830152613524816134eb565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f5f8201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b5f613585602c836129ac565b91506135908261352b565b604082019050919050565b5f6020820190508181035f8301526135b281613579565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4552433732313a20696e76616c696420746f6b656e20494400000000000000005f82015250565b5f61361a6018836129ac565b9150613625826135e6565b602082019050919050565b5f6020820190508181035f8301526136478161360e565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f7420612076615f8201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b5f6136a86029836129ac565b91506136b38261364e565b604082019050919050565b5f6020820190508181035f8301526136d58161369c565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61371382612a4c565b915061371e83612a4c565b9250828201905080821115613736576137356136dc565b5b92915050565b61374581612d39565b82525050565b5f60608201905061375e5f83018661373c565b61376b6020830185612b6a565b6137786040830184612ada565b949350505050565b5f81905092915050565b5f613794826129a2565b61379e8185613780565b93506137ae8185602086016129bc565b80840191505092915050565b7f3f6d6f64656c3d000000000000000000000000000000000000000000000000005f82015250565b5f6137ee600783613780565b91506137f9826137ba565b600782019050919050565b5f61380f828661378a565b915061381b828561378a565b9150613826826137e2565b9150613832828461378a565b9150819050949350505050565b7f4552433732313a207472616e736665722066726f6d20696e636f7272656374205f8201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b5f6138996025836129ac565b91506138a48261383f565b604082019050919050565b5f6020820190508181035f8301526138c68161388d565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f6139276024836129ac565b9150613932826138cd565b604082019050919050565b5f6020820190508181035f8301526139548161391b565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c6572000000000000005f82015250565b5f61398f6019836129ac565b915061399a8261395b565b602082019050919050565b5f6020820190508181035f8301526139bc81613983565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f20616464726573735f82015250565b5f6139f76020836129ac565b9150613a02826139c3565b602082019050919050565b5f6020820190508181035f830152613a24816139eb565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e746564000000005f82015250565b5f613a5f601c836129ac565b9150613a6a82613a2b565b602082019050919050565b5f6020820190508181035f830152613a8c81613a53565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e2045524337323152655f8201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b5f613aed6032836129ac565b9150613af882613a93565b604082019050919050565b5f6020820190508181035f830152613b1a81613ae1565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000005f82015250565b5f613b82601783613780565b9150613b8d82613b4e565b601782019050919050565b7f206973206d697373696e6720726f6c65200000000000000000000000000000005f82015250565b5f613bcc601183613780565b9150613bd782613b98565b601182019050919050565b5f613bec82613b76565b9150613bf8828561378a565b9150613c0382613bc0565b9150613c0f828461378a565b91508190509392505050565b7f455243373231456e756d657261626c653a20636f6e73656375746976652074725f8201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b5f613c756035836129ac565b9150613c8082613c1b565b604082019050919050565b5f6020820190508181035f830152613ca281613c69565b9050919050565b5f81519050919050565b5f82825260208201905092915050565b5f613ccd82613ca9565b613cd78185613cb3565b9350613ce78185602086016129bc565b613cf0816129e4565b840191505092915050565b5f608082019050613d0e5f830187612ada565b613d1b6020830186612ada565b613d286040830185612b6a565b8181036060830152613d3a8184613cc3565b905095945050505050565b5f81519050613d538161286e565b92915050565b5f60208284031215613d6e57613d6d61283b565b5b5f613d7b84828501613d45565b91505092915050565b5f613d8e82612a4c565b9150613d9983612a4c565b9250828202613da781612a4c565b91508282048414831517613dbe57613dbd6136dc565b5b5092915050565b5f613dcf82612a4c565b91505f8203613de157613de06136dc565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e745f82015250565b5f613e206020836129ac565b9150613e2b82613dec565b602082019050919050565b5f6020820190508181035f830152613e4d81613e14565b9050919050565b5f613e5e82612a4c565b9150613e6983612a4c565b9250828203905081811115613e8157613e806136dc565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffdfea264697066735822122069aa4af39b7394dee31da07d87b7a863f178d2e91985d219ef7fdbba351d66f664736f6c63430008180033",
}

// TrainersABI is the input ABI used to generate the binding from.
// Deprecated: Use TrainersMetaData.ABI instead.
var TrainersABI = TrainersMetaData.ABI

// TrainersBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TrainersMetaData.Bin instead.
var TrainersBin = TrainersMetaData.Bin

// DeployTrainers deploys a new Ethereum contract, binding an instance of Trainers to it.
func DeployTrainers(auth *bind.TransactOpts, backend bind.ContractBackend, _name string, _symbol string) (common.Address, *types.Transaction, *Trainers, error) {
	parsed, err := TrainersMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TrainersBin), backend, _name, _symbol)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Trainers{TrainersCaller: TrainersCaller{contract: contract}, TrainersTransactor: TrainersTransactor{contract: contract}, TrainersFilterer: TrainersFilterer{contract: contract}}, nil
}

// Trainers is an auto generated Go binding around an Ethereum contract.
type Trainers struct {
	TrainersCaller     // Read-only binding to the contract
	TrainersTransactor // Write-only binding to the contract
	TrainersFilterer   // Log filterer for contract events
}

// TrainersCaller is an auto generated read-only Go binding around an Ethereum contract.
type TrainersCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TrainersTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TrainersTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TrainersFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TrainersFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TrainersSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TrainersSession struct {
	Contract     *Trainers         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TrainersCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TrainersCallerSession struct {
	Contract *TrainersCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// TrainersTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TrainersTransactorSession struct {
	Contract     *TrainersTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// TrainersRaw is an auto generated low-level Go binding around an Ethereum contract.
type TrainersRaw struct {
	Contract *Trainers // Generic contract binding to access the raw methods on
}

// TrainersCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TrainersCallerRaw struct {
	Contract *TrainersCaller // Generic read-only contract binding to access the raw methods on
}

// TrainersTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TrainersTransactorRaw struct {
	Contract *TrainersTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTrainers creates a new instance of Trainers, bound to a specific deployed contract.
func NewTrainers(address common.Address, backend bind.ContractBackend) (*Trainers, error) {
	contract, err := bindTrainers(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Trainers{TrainersCaller: TrainersCaller{contract: contract}, TrainersTransactor: TrainersTransactor{contract: contract}, TrainersFilterer: TrainersFilterer{contract: contract}}, nil
}

// NewTrainersCaller creates a new read-only instance of Trainers, bound to a specific deployed contract.
func NewTrainersCaller(address common.Address, caller bind.ContractCaller) (*TrainersCaller, error) {
	contract, err := bindTrainers(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TrainersCaller{contract: contract}, nil
}

// NewTrainersTransactor creates a new write-only instance of Trainers, bound to a specific deployed contract.
func NewTrainersTransactor(address common.Address, transactor bind.ContractTransactor) (*TrainersTransactor, error) {
	contract, err := bindTrainers(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TrainersTransactor{contract: contract}, nil
}

// NewTrainersFilterer creates a new log filterer instance of Trainers, bound to a specific deployed contract.
func NewTrainersFilterer(address common.Address, filterer bind.ContractFilterer) (*TrainersFilterer, error) {
	contract, err := bindTrainers(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TrainersFilterer{contract: contract}, nil
}

// bindTrainers binds a generic wrapper to an already deployed contract.
func bindTrainers(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TrainersMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Trainers *TrainersRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Trainers.Contract.TrainersCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Trainers *TrainersRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Trainers.Contract.TrainersTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Trainers *TrainersRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Trainers.Contract.TrainersTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Trainers *TrainersCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Trainers.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Trainers *TrainersTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Trainers.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Trainers *TrainersTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Trainers.Contract.contract.Transact(opts, method, params...)
}

// ADMIN is a free data retrieval call binding the contract method 0x2a0acc6a.
//
// Solidity: function ADMIN() view returns(bytes32)
func (_Trainers *TrainersCaller) ADMIN(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Trainers.contract.Call(opts, &out, "ADMIN")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ADMIN is a free data retrieval call binding the contract method 0x2a0acc6a.
//
// Solidity: function ADMIN() view returns(bytes32)
func (_Trainers *TrainersSession) ADMIN() ([32]byte, error) {
	return _Trainers.Contract.ADMIN(&_Trainers.CallOpts)
}

// ADMIN is a free data retrieval call binding the contract method 0x2a0acc6a.
//
// Solidity: function ADMIN() view returns(bytes32)
func (_Trainers *TrainersCallerSession) ADMIN() ([32]byte, error) {
	return _Trainers.Contract.ADMIN(&_Trainers.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Trainers *TrainersCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Trainers.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Trainers *TrainersSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Trainers.Contract.DEFAULTADMINROLE(&_Trainers.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Trainers *TrainersCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Trainers.Contract.DEFAULTADMINROLE(&_Trainers.CallOpts)
}

// DEP is a free data retrieval call binding the contract method 0x6313bd30.
//
// Solidity: function DEP() view returns(bytes32)
func (_Trainers *TrainersCaller) DEP(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Trainers.contract.Call(opts, &out, "DEP")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEP is a free data retrieval call binding the contract method 0x6313bd30.
//
// Solidity: function DEP() view returns(bytes32)
func (_Trainers *TrainersSession) DEP() ([32]byte, error) {
	return _Trainers.Contract.DEP(&_Trainers.CallOpts)
}

// DEP is a free data retrieval call binding the contract method 0x6313bd30.
//
// Solidity: function DEP() view returns(bytes32)
func (_Trainers *TrainersCallerSession) DEP() ([32]byte, error) {
	return _Trainers.Contract.DEP(&_Trainers.CallOpts)
}

// URI is a free data retrieval call binding the contract method 0xfe85996a.
//
// Solidity: function URI_() view returns(string)
func (_Trainers *TrainersCaller) URI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Trainers.contract.Call(opts, &out, "URI_")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// URI is a free data retrieval call binding the contract method 0xfe85996a.
//
// Solidity: function URI_() view returns(string)
func (_Trainers *TrainersSession) URI() (string, error) {
	return _Trainers.Contract.URI(&_Trainers.CallOpts)
}

// URI is a free data retrieval call binding the contract method 0xfe85996a.
//
// Solidity: function URI_() view returns(string)
func (_Trainers *TrainersCallerSession) URI() (string, error) {
	return _Trainers.Contract.URI(&_Trainers.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Trainers *TrainersCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Trainers.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Trainers *TrainersSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Trainers.Contract.BalanceOf(&_Trainers.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Trainers *TrainersCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Trainers.Contract.BalanceOf(&_Trainers.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Trainers *TrainersCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Trainers.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Trainers *TrainersSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Trainers.Contract.GetApproved(&_Trainers.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Trainers *TrainersCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Trainers.Contract.GetApproved(&_Trainers.CallOpts, tokenId)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Trainers *TrainersCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Trainers.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Trainers *TrainersSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Trainers.Contract.GetRoleAdmin(&_Trainers.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Trainers *TrainersCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Trainers.Contract.GetRoleAdmin(&_Trainers.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Trainers *TrainersCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Trainers.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Trainers *TrainersSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Trainers.Contract.HasRole(&_Trainers.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Trainers *TrainersCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Trainers.Contract.HasRole(&_Trainers.CallOpts, role, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Trainers *TrainersCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Trainers.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Trainers *TrainersSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Trainers.Contract.IsApprovedForAll(&_Trainers.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Trainers *TrainersCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Trainers.Contract.IsApprovedForAll(&_Trainers.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Trainers *TrainersCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Trainers.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Trainers *TrainersSession) Name() (string, error) {
	return _Trainers.Contract.Name(&_Trainers.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Trainers *TrainersCallerSession) Name() (string, error) {
	return _Trainers.Contract.Name(&_Trainers.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Trainers *TrainersCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Trainers.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Trainers *TrainersSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Trainers.Contract.OwnerOf(&_Trainers.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Trainers *TrainersCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Trainers.Contract.OwnerOf(&_Trainers.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Trainers *TrainersCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Trainers.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Trainers *TrainersSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Trainers.Contract.SupportsInterface(&_Trainers.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Trainers *TrainersCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Trainers.Contract.SupportsInterface(&_Trainers.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Trainers *TrainersCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Trainers.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Trainers *TrainersSession) Symbol() (string, error) {
	return _Trainers.Contract.Symbol(&_Trainers.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Trainers *TrainersCallerSession) Symbol() (string, error) {
	return _Trainers.Contract.Symbol(&_Trainers.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Trainers *TrainersCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Trainers.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Trainers *TrainersSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Trainers.Contract.TokenByIndex(&_Trainers.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Trainers *TrainersCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Trainers.Contract.TokenByIndex(&_Trainers.CallOpts, index)
}

// TokenModel is a free data retrieval call binding the contract method 0x1b21c00a.
//
// Solidity: function tokenModel(uint256 _id) view returns(uint256)
func (_Trainers *TrainersCaller) TokenModel(opts *bind.CallOpts, _id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Trainers.contract.Call(opts, &out, "tokenModel", _id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenModel is a free data retrieval call binding the contract method 0x1b21c00a.
//
// Solidity: function tokenModel(uint256 _id) view returns(uint256)
func (_Trainers *TrainersSession) TokenModel(_id *big.Int) (*big.Int, error) {
	return _Trainers.Contract.TokenModel(&_Trainers.CallOpts, _id)
}

// TokenModel is a free data retrieval call binding the contract method 0x1b21c00a.
//
// Solidity: function tokenModel(uint256 _id) view returns(uint256)
func (_Trainers *TrainersCallerSession) TokenModel(_id *big.Int) (*big.Int, error) {
	return _Trainers.Contract.TokenModel(&_Trainers.CallOpts, _id)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Trainers *TrainersCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Trainers.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Trainers *TrainersSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Trainers.Contract.TokenOfOwnerByIndex(&_Trainers.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Trainers *TrainersCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Trainers.Contract.TokenOfOwnerByIndex(&_Trainers.CallOpts, owner, index)
}

// TokenTraker is a free data retrieval call binding the contract method 0x0e1a6a9c.
//
// Solidity: function tokenTraker_() view returns(uint256)
func (_Trainers *TrainersCaller) TokenTraker(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Trainers.contract.Call(opts, &out, "tokenTraker_")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenTraker is a free data retrieval call binding the contract method 0x0e1a6a9c.
//
// Solidity: function tokenTraker_() view returns(uint256)
func (_Trainers *TrainersSession) TokenTraker() (*big.Int, error) {
	return _Trainers.Contract.TokenTraker(&_Trainers.CallOpts)
}

// TokenTraker is a free data retrieval call binding the contract method 0x0e1a6a9c.
//
// Solidity: function tokenTraker_() view returns(uint256)
func (_Trainers *TrainersCallerSession) TokenTraker() (*big.Int, error) {
	return _Trainers.Contract.TokenTraker(&_Trainers.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 _id) view returns(string)
func (_Trainers *TrainersCaller) TokenURI(opts *bind.CallOpts, _id *big.Int) (string, error) {
	var out []interface{}
	err := _Trainers.contract.Call(opts, &out, "tokenURI", _id)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 _id) view returns(string)
func (_Trainers *TrainersSession) TokenURI(_id *big.Int) (string, error) {
	return _Trainers.Contract.TokenURI(&_Trainers.CallOpts, _id)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 _id) view returns(string)
func (_Trainers *TrainersCallerSession) TokenURI(_id *big.Int) (string, error) {
	return _Trainers.Contract.TokenURI(&_Trainers.CallOpts, _id)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Trainers *TrainersCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Trainers.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Trainers *TrainersSession) TotalSupply() (*big.Int, error) {
	return _Trainers.Contract.TotalSupply(&_Trainers.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Trainers *TrainersCallerSession) TotalSupply() (*big.Int, error) {
	return _Trainers.Contract.TotalSupply(&_Trainers.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Trainers *TrainersTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainers.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Trainers *TrainersSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainers.Contract.Approve(&_Trainers.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Trainers *TrainersTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainers.Contract.Approve(&_Trainers.TransactOpts, to, tokenId)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Trainers *TrainersTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Trainers.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Trainers *TrainersSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Trainers.Contract.GrantRole(&_Trainers.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Trainers *TrainersTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Trainers.Contract.GrantRole(&_Trainers.TransactOpts, role, account)
}

// Mint is a paid mutator transaction binding the contract method 0xad0be4bd.
//
// Solidity: function mint(address _to, uint16 _m) returns()
func (_Trainers *TrainersTransactor) Mint(opts *bind.TransactOpts, _to common.Address, _m uint16) (*types.Transaction, error) {
	return _Trainers.contract.Transact(opts, "mint", _to, _m)
}

// Mint is a paid mutator transaction binding the contract method 0xad0be4bd.
//
// Solidity: function mint(address _to, uint16 _m) returns()
func (_Trainers *TrainersSession) Mint(_to common.Address, _m uint16) (*types.Transaction, error) {
	return _Trainers.Contract.Mint(&_Trainers.TransactOpts, _to, _m)
}

// Mint is a paid mutator transaction binding the contract method 0xad0be4bd.
//
// Solidity: function mint(address _to, uint16 _m) returns()
func (_Trainers *TrainersTransactorSession) Mint(_to common.Address, _m uint16) (*types.Transaction, error) {
	return _Trainers.Contract.Mint(&_Trainers.TransactOpts, _to, _m)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Trainers *TrainersTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Trainers.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Trainers *TrainersSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Trainers.Contract.RenounceRole(&_Trainers.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Trainers *TrainersTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Trainers.Contract.RenounceRole(&_Trainers.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Trainers *TrainersTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Trainers.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Trainers *TrainersSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Trainers.Contract.RevokeRole(&_Trainers.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Trainers *TrainersTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Trainers.Contract.RevokeRole(&_Trainers.TransactOpts, role, account)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainers *TrainersTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainers.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainers *TrainersSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainers.Contract.SafeTransferFrom(&_Trainers.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainers *TrainersTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainers.Contract.SafeTransferFrom(&_Trainers.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Trainers *TrainersTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Trainers.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Trainers *TrainersSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Trainers.Contract.SafeTransferFrom0(&_Trainers.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Trainers *TrainersTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Trainers.Contract.SafeTransferFrom0(&_Trainers.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Trainers *TrainersTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Trainers.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Trainers *TrainersSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Trainers.Contract.SetApprovalForAll(&_Trainers.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Trainers *TrainersTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Trainers.Contract.SetApprovalForAll(&_Trainers.TransactOpts, operator, approved)
}

// SetURI is a paid mutator transaction binding the contract method 0x02fe5305.
//
// Solidity: function setURI(string _u) returns()
func (_Trainers *TrainersTransactor) SetURI(opts *bind.TransactOpts, _u string) (*types.Transaction, error) {
	return _Trainers.contract.Transact(opts, "setURI", _u)
}

// SetURI is a paid mutator transaction binding the contract method 0x02fe5305.
//
// Solidity: function setURI(string _u) returns()
func (_Trainers *TrainersSession) SetURI(_u string) (*types.Transaction, error) {
	return _Trainers.Contract.SetURI(&_Trainers.TransactOpts, _u)
}

// SetURI is a paid mutator transaction binding the contract method 0x02fe5305.
//
// Solidity: function setURI(string _u) returns()
func (_Trainers *TrainersTransactorSession) SetURI(_u string) (*types.Transaction, error) {
	return _Trainers.Contract.SetURI(&_Trainers.TransactOpts, _u)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainers *TrainersTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainers.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainers *TrainersSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainers.Contract.TransferFrom(&_Trainers.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainers *TrainersTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainers.Contract.TransferFrom(&_Trainers.TransactOpts, from, to, tokenId)
}

// TrainersApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Trainers contract.
type TrainersApprovalIterator struct {
	Event *TrainersApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainersApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainersApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainersApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainersApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainersApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainersApproval represents a Approval event raised by the Trainers contract.
type TrainersApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Trainers *TrainersFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*TrainersApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Trainers.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TrainersApprovalIterator{contract: _Trainers.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Trainers *TrainersFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TrainersApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Trainers.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainersApproval)
				if err := _Trainers.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Trainers *TrainersFilterer) ParseApproval(log types.Log) (*TrainersApproval, error) {
	event := new(TrainersApproval)
	if err := _Trainers.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainersApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Trainers contract.
type TrainersApprovalForAllIterator struct {
	Event *TrainersApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainersApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainersApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainersApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainersApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainersApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainersApprovalForAll represents a ApprovalForAll event raised by the Trainers contract.
type TrainersApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Trainers *TrainersFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*TrainersApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Trainers.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &TrainersApprovalForAllIterator{contract: _Trainers.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Trainers *TrainersFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *TrainersApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Trainers.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainersApprovalForAll)
				if err := _Trainers.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Trainers *TrainersFilterer) ParseApprovalForAll(log types.Log) (*TrainersApprovalForAll, error) {
	event := new(TrainersApprovalForAll)
	if err := _Trainers.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainersMintTrainerIterator is returned from FilterMintTrainer and is used to iterate over the raw logs and unpacked data for MintTrainer events raised by the Trainers contract.
type TrainersMintTrainerIterator struct {
	Event *TrainersMintTrainer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainersMintTrainerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainersMintTrainer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainersMintTrainer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainersMintTrainerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainersMintTrainerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainersMintTrainer represents a MintTrainer event raised by the Trainers contract.
type TrainersMintTrainer struct {
	Arg0 uint16
	Arg1 *big.Int
	Arg2 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterMintTrainer is a free log retrieval operation binding the contract event 0xfcbd9479bb682193b3eb060a58134eda82cf0a141904328119cfb9c15e6e171e.
//
// Solidity: event MintTrainer(uint16 arg0, uint256 arg1, address arg2)
func (_Trainers *TrainersFilterer) FilterMintTrainer(opts *bind.FilterOpts) (*TrainersMintTrainerIterator, error) {

	logs, sub, err := _Trainers.contract.FilterLogs(opts, "MintTrainer")
	if err != nil {
		return nil, err
	}
	return &TrainersMintTrainerIterator{contract: _Trainers.contract, event: "MintTrainer", logs: logs, sub: sub}, nil
}

// WatchMintTrainer is a free log subscription operation binding the contract event 0xfcbd9479bb682193b3eb060a58134eda82cf0a141904328119cfb9c15e6e171e.
//
// Solidity: event MintTrainer(uint16 arg0, uint256 arg1, address arg2)
func (_Trainers *TrainersFilterer) WatchMintTrainer(opts *bind.WatchOpts, sink chan<- *TrainersMintTrainer) (event.Subscription, error) {

	logs, sub, err := _Trainers.contract.WatchLogs(opts, "MintTrainer")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainersMintTrainer)
				if err := _Trainers.contract.UnpackLog(event, "MintTrainer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintTrainer is a log parse operation binding the contract event 0xfcbd9479bb682193b3eb060a58134eda82cf0a141904328119cfb9c15e6e171e.
//
// Solidity: event MintTrainer(uint16 arg0, uint256 arg1, address arg2)
func (_Trainers *TrainersFilterer) ParseMintTrainer(log types.Log) (*TrainersMintTrainer, error) {
	event := new(TrainersMintTrainer)
	if err := _Trainers.contract.UnpackLog(event, "MintTrainer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainersRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the Trainers contract.
type TrainersRoleAdminChangedIterator struct {
	Event *TrainersRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainersRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainersRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainersRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainersRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainersRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainersRoleAdminChanged represents a RoleAdminChanged event raised by the Trainers contract.
type TrainersRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Trainers *TrainersFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*TrainersRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Trainers.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &TrainersRoleAdminChangedIterator{contract: _Trainers.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Trainers *TrainersFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *TrainersRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Trainers.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainersRoleAdminChanged)
				if err := _Trainers.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Trainers *TrainersFilterer) ParseRoleAdminChanged(log types.Log) (*TrainersRoleAdminChanged, error) {
	event := new(TrainersRoleAdminChanged)
	if err := _Trainers.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainersRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Trainers contract.
type TrainersRoleGrantedIterator struct {
	Event *TrainersRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainersRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainersRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainersRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainersRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainersRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainersRoleGranted represents a RoleGranted event raised by the Trainers contract.
type TrainersRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Trainers *TrainersFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*TrainersRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Trainers.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &TrainersRoleGrantedIterator{contract: _Trainers.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Trainers *TrainersFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *TrainersRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Trainers.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainersRoleGranted)
				if err := _Trainers.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Trainers *TrainersFilterer) ParseRoleGranted(log types.Log) (*TrainersRoleGranted, error) {
	event := new(TrainersRoleGranted)
	if err := _Trainers.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainersRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Trainers contract.
type TrainersRoleRevokedIterator struct {
	Event *TrainersRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainersRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainersRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainersRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainersRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainersRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainersRoleRevoked represents a RoleRevoked event raised by the Trainers contract.
type TrainersRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Trainers *TrainersFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*TrainersRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Trainers.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &TrainersRoleRevokedIterator{contract: _Trainers.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Trainers *TrainersFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *TrainersRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Trainers.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainersRoleRevoked)
				if err := _Trainers.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Trainers *TrainersFilterer) ParseRoleRevoked(log types.Log) (*TrainersRoleRevoked, error) {
	event := new(TrainersRoleRevoked)
	if err := _Trainers.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainersTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Trainers contract.
type TrainersTransferIterator struct {
	Event *TrainersTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainersTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainersTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainersTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainersTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainersTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainersTransfer represents a Transfer event raised by the Trainers contract.
type TrainersTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Trainers *TrainersFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*TrainersTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Trainers.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TrainersTransferIterator{contract: _Trainers.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Trainers *TrainersFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TrainersTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Trainers.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainersTransfer)
				if err := _Trainers.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Trainers *TrainersFilterer) ParseTransfer(log types.Log) (*TrainersTransfer, error) {
	event := new(TrainersTransfer)
	if err := _Trainers.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
